\input tex/epsf.tex
\font\sixteen=cmbx15
\font\twelve=cmr12
\font\fonteautor=cmbx12
\font\fonteemail=cmtt10
\font\twelvenegit=cmbxti12
\font\twelvebold=cmbx12
\font\trezebold=cmbx13
\font\twelveit=cmsl12
\font\monodoze=cmtt12
\font\it=cmti12
\voffset=0,959994cm % 3,5cm de margem superior e 2,5cm inferior
\parskip=6pt

\def\titulo#1{{\noindent\sixteen\hbox to\hsize{\hfill#1\hfill}}}
\def\autor#1{{\noindent\fonteautor\hbox to\hsize{\hfill#1\hfill}}}
\def\email#1{{\noindent\fonteemail\hbox to\hsize{\hfill#1\hfill}}}
\def\negrito#1{{\twelvebold#1}}
\def\italico#1{{\twelveit#1}}
\def\monoespaco#1{{\monodoze#1}}

\long\def\abstract#1{\parshape 10 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
\noindent{{\twelvenegit Abstract: }\twelveit #1}}

\def\resumo#1{\parshape  10 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
\noindent{{\twelvenegit Resumo: }\twelveit #1}}

\def\secao#1{\vskip12pt\noindent{\trezebold#1}\parshape 1 0cm 15cm}
\def\subsecao#1{\vskip12pt\noindent{\twelvebold#1}}
\def\subsubsecao#1{\vskip12pt\noindent{\negrito{#1}}}
\def\referencia#1{\vskip6pt\parshape 5 0cm 15cm 0.5cm 14.5cm 0.5cm 14.5cm
0.5cm 14.5cm 0.5cm 14.5cm {\twelve\noindent#1}}

%@* .

\twelve
\vskip12pt
\titulo{Weaver Network Module}
\vskip12pt
\autor{Thiago Leucz Astrizi}
\vskip6pt
\email{thiago@@bitbitbit.com.br}
\vskip6pt

\abstract{This article presents an implementation, using literate
programming, of the network code required for secure synchronization
between different instances of a game or interactive software built on
the Weaver game engine. It covers both the message exchange mechanisms
and the cryptographic components responsible for ensuring
confidentiality, integrity, and mutual authentication among the
participating programs.}

\secao{1. Introduction}

\subsecao{1.1. Exported Functions}

The network module of the Weaver game engine defines and exports a set
of functions that can be used externally. We will list these functions
and their signatures here.

First, the initialization and shutdown functions. The initialization
function must be the first one called, before any other function
listed below. The shutdown function must be the last: after invoking
it, no other network function should be called (except the
initialization function to reinitialize this module). The
initialization function must also receive pairs of functions for
memory allocation and deallocation: one pair for temporary allocations
and another for permanent allocations. Adding this support for custom
memory managers is performed by all Weaver modules.

@<Function Declaration (network.h)@>=
void _Winit_network(void *(*permanent_alloc)(size_t),
                    void (*permanent_free)(void *),
                    void *(*temporary_alloc)(size_t),
                    void (*temporary_free)(void *));
void _Wfinish_network(void);
@

To create a new connection (but not activate it yet), we use:

@<Function Declaration (network.h)@>+=
struct connection *_Wcreate_connection(void);
@

\subsecao{1.2. Literate Programming}

Our API will be written using the literate programming technique,
proposed by Knuth on [Knuth, 1984]. It consist in writting a computer
program explaining didactically in a text what is being done while
presenting the code. The program is compiled extracting the computer
code directly from the didactical text. The code shall be presented in
a way and order such that it is best for explaining for a human. Not
how it would be easier to compile.

Using this technique, this document is not a simple documentation for
our code. It is the code by itself. The part that will be extracted to
be compiled can be identified by a gray background. We begin each
piece of code by a title that names it. For example, immediately
before this subsection we presented a series of function
declarations. And how one could deduct by the title, most of them will
be positioned in the file \monoespaco{network.h}.

We show below the structure of the file \monoespaco{network.h}:

@(src/network.h@>=
#ifndef __WEAVER_NETWORK
#define __WEAVER_NETWORK
#ifdef __cplusplus
extern "C" {
#endif
#include <stdlib.h> // Standard library
@<Include General Headers (network.h)@>
//@<General Macros (network.h)@>
@<Data Structures (network.h)@>
@<Function Declaration (network.h)@>
#ifdef __cplusplus
}
#endif
#endif
@

The code above shows the default boilerplate for defining a header in
our C API. The first two lines and the last one are macros that ensure
the header is not included more than once in a single compilation
unit. Lines 3, 4, 5, and the three lines before the last one make the
header compatible with C++ code. These lines tell the compiler that we
are using C code and, therefore, it can apply optimizations assuming
that no C++-specific features---such as operator overloading---will be
used.

Next, we include a header that allows us to use boolean variables. You
may also notice some parts highlighted in red. One of them is labeled
``Function Declaration (network.h)'', the same title used for most of
the code declared earlier. This means that all previously defined code
blocks with that title will be inserted at this point in the file. The
other red-highlighted parts represent code that we will define in the
following sections.

If you want to understand how the \monoespaco{network.c} file
relates to this header, its structure is as follows:

@(src/network.c@>=
#include "network.h"
@<Local Headers (network.c)@>
//@<Local Macros (network.c)@>
//@<Local Data Structures (network.c)@>
@<Local Variables (network.c)@>
//@<Auxiliary Local Functions (network.c)@>
@<API Functions Definition (network.c)@>
@

All the code presented in this document will be placed in one of these
two files. No other files will be created.

\secao{2. Newtwork Module Initialization}

The first part of the code we will introduce consists of the
network-related headers. On Windows, the library used is
``winsock2''. This library must also be linked externally to the
program, but this can be done using a ``pragma'' directive for the
compiler:

@<Local Headers (network.c)@>=
#if defined(_WIN32)
#include <winsock2.h>
#pragma comment(lib,"wsock32.lib")
#endif
@

On Unix-based systems, we only need to include the appropriate
headers. The ability to establish connections is already part of the
standard libraries and does not require linking with external
libraries:

@<Local Headers (network.c)@>+=
#if defined(__unix__)
#include <sys/socket.h>
#include <netinet/in.h>
#include <fcntl.h>
#endif
@

If we are running WebAssembly in a web browser, network connections
must be made using the browser's own capabilities, and this does not
require any special headers.

In most environments, no special initialization is required before
using functions to establish network connections. However, there are
exceptions (Windows, for example), and for this reason, it is
important to have a function that handles the initialization of the
network module. This function performs initialization on systems where
it is needed. On other systems, initialization is still important, but
only for storing our allocation and deallocation functions.

@<Local Headers (network.c)@>+=
#include <stdlib.h> // Require: 'malloc', 'free'
@

@<Local Variables (network.c)@>=
// By default, the allocation and deallocation functions are from stdlib.
// But the initialization below may change this:
static void *(*permanent_alloc)(size_t) = malloc;
static void *(*temporary_alloc)(size_t) = malloc;
static void (*permanent_free)(void *) = free;
static void (*temporary_free)(void *) = free;
@

@<API Functions Definition (network.c)@>=
void _Winit_network(void *(*p_alloc)(size_t), void (*p_free)(void *),
                    void *(*t_alloc)(size_t), void (*t_free)(void *)){
  permanent_alloc = p_alloc;
  permanent_free = p_free;
  temporary_alloc = t_alloc;
  temporary_free = t_free;  
#if defined(_WIN32) // Windows:
  WSADATA WsaData;
  WSAStartup(MAKEWORD(2,2), &WsaData);
#endif
  return;
}
@

Systems that require additional initialization to use the network may
also require a shutdown procedure, which is invoked below:

@<API Functions Definition (network.c)@>+=
void _Wfinish_network(void){
#if defined(_WIN32) // Windows:
  WSACleanup();
#endif
  return;
}
@

\secao{3. UDP Connections}

In most runtime environments, our communication will be based on the
UDP protocol. UDP, which stands for User Datagram Protocol, defines a
format through which two machines can communicate directly over the IP
protocol. It is a very simple protocol, and precisely because of that,
it offers no guarantees that each of the packets sent will reach its
destination, or that they will arrive in the expected order.

The protocol specifies that every message exchanged between two
machines with a given IP address includes a header with four fields,
each 2 bytes (or 16 bits) in size. These fields are: source port,
destination port, length of the datagram in octets (including both the
header and the data), and a checksum for integrity verification. The
rest of the packet contains the transmitted data, which can range from
0 bytes to 65,527 bytes (the maximum size, due to the 16-bit length
field). In practice, packets larger than 1,500 bytes are not
recommended, as they are likely to be fragmented, which can impact
performance and reduce the likelihood of successful delivery. It's
important to keep in mind that the IPv4 or IPv6 protocol used to
transmit the message will also consume part of this size limit (20â€“60
bytes in the case of IPv4, and exactly 40 bytes in the case of IPv6).

\alinhaverbatim
|_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|     |_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|
           Source Port                            Destination Port

|_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|     |_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|
          Datagram Size                             Checksum
|_|_|_|_|_|_|_|_|.........................................|_|_|_|_|_|_|_|_|_|
                                 Data
\alinhanormal

Communication between two participants usually involves establishing a
connection between them: both sides open a ``socket'' (an abstraction
provided by the operating system for network connections), with the
program on the initiating side specifying the address and port of the
destination program. This occurs in the following scenarios:

1) Computers connect using a local area network (LAN). In this case,
they use their local IP addresses and do not need to worry about
Internet IPs.

2) Clients communicate through a server that acts as an
intermediary. In this case, each client only needs to know the
server's public Internet IP address, and the server handles the
message exchange between them.

However, there is a more complex scenario:

3) Clients are on different local networks and want to connect
directly to each other.

It is important to note that, in this case, each client must also
discover its own public Internet address, as well as how the local
router translates IP and port combinations destined for the client to
avoid conflicts with other clients on the same network who might be
using the same port for external connections. To handle this, the
router uses a NAT table for translation. For example, an external
connection to port 6282 may be translatedâ€”using the NAT tableâ€”as a
connection to port 3855 on local machine A, while an external
connection to port 6283 may be translated as a connection to port 3855
on local machine B. Figuring out how to handle such translations can
be done with the help of an external server, using protocols such as
STUN.

Therefore, to handle connections in scenario 3, the following are required:

a) The address of an external STUN server.

b) Each pair of machines attempting to connect must generate data
describing their own connection and send it to their peer. Since they
are not yet connected, this information must be exchanged through an
external channel.

Instead of dealing directly with the low-level concept of sockets, we
will create an abstraction capable of encompassing both traditional
sockets and WebRTC connections used in the more complex scenario 3. A
connection must be created and then activated. Creating the connection
initializes its data structure, and in scenario 3, this structure
contains connection information that must be shared with the peer via
external mechanisms. Activating the connection requires passing a
string, which in scenarios 1 and 2 is simply an IP address and port,
but in scenario 3 consists of a string with connection data generated
by the peer and received through an external channel.

This means the structure must contain the following variables:

@<Include General Headers (network.h)@>=
#include <stdbool.h> // Require 'bool'
@

@<Data Structures (network.h)@>=
struct connection{
  bool active; // Connection was activated?
  char *local_data, *peer_data; // Local data and peer data connection
  @<struct connection: Attributes@>
};
@

\subsecao{3.1. Creating the Connection}

In the simplest case of creating a connection, we are running
natively, not in a web browser, and we want to use sockets. In our
connection structure, we therefore need to store an identifier for the
socket we will create:

@<struct connection: Attributes@>=
#if !defined(__EMSCRIPTEN__)
int _socket_handle;
#endif
@

The function that creates a new connection must then create a UDP
socket. In the simplest cases, this function is limited to:

@<API Functions Definition (network.c)@>+=
#if !defined(__EMSCRIPTEN__)
struct connection *_Wcreate_connection(void){
  struct connection *cnt;
  cnt = permanent_alloc(sizeof(struct connection));
  if(cnt != NULL){
    cnt -> local_data = cnt -> peer_data = NULL;
    cnt -> _socket_handle = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    cnt -> active = false;
    if(cnt -> _socket_handle == 0){
      if(permanent_free != NULL)
        permanent_free(cnt);
      return NULL;
    }
  }
  return cnt;
}
#endif
@


\end
