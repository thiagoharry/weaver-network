\font\sixteen=cmbx15
\font\twelve=cmr12
\font\fonteautor=cmbx12
\font\fonteemail=cmtt10
\font\twelvenegit=cmbxti12
\font\twelvebold=cmbx12
\font\trezebold=cmbx13
\font\twelveit=cmsl12
\font\monodoze=cmtt12
\font\it=cmti12
\voffset=0,959994cm % 3,5cm de margem superior e 2,5cm inferior
\parskip=6pt

\def\titulo#1{{\noindent\sixteen\hbox to\hsize{\hfill#1\hfill}}}
\def\autor#1{{\noindent\fonteautor\hbox to\hsize{\hfill#1\hfill}}}
\def\email#1{{\noindent\fonteemail\hbox to\hsize{\hfill#1\hfill}}}
\def\negrito#1{{\twelvebold#1}}
\def\italico#1{{\twelveit#1}}
\def\monoespaco#1{{\monodoze#1}}

\long\def\abstract#1{\parshape 10 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
\noindent{{\twelvenegit Abstract: }\twelveit #1}}

\def\resumo#1{\parshape  10 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
0.8cm 13.4cm 0.8cm 13.4cm 0.8cm 13.4cm
\noindent{{\twelvenegit Resumo: }\twelveit #1}}

\def\secao#1{\vskip12pt\noindent{\trezebold#1}\parshape 1 0cm 15cm}
\def\subsecao#1{\vskip12pt\noindent{\twelvebold#1}}
\def\subsubsecao#1{\vskip12pt\noindent{\negrito{#1}}}
\def\referencia#1{\vskip6pt\parshape 5 0cm 15cm 0.5cm 14.5cm 0.5cm 14.5cm
0.5cm 14.5cm 0.5cm 14.5cm {\twelve\noindent#1}}

%@* .

\twelve
\vskip12pt
\titulo{Módulo de Rede Weaver}
\vskip12pt
\autor{Thiago Leucz Astrizi}
\vskip6pt
\email{thiago@@bitbitbit.com.br}
\vskip6pt

\abstract{This article presents an implementation, using literate
programming, of the network code required for secure synchronization
between different instances of a game or interactive software built on
the Weaver game engine. It covers both the message exchange mechanisms
and the cryptographic components responsible for ensuring
confidentiality, integrity, and mutual authentication among the
participating programs.}

\vskip 0.5cm plus 3pt minus 3pt

\resumo{Este artigo apresenta uma implementação, utilizando
programação literária, do código de rede necessário para a
sincronização segura entre diferentes instâncias de um jogo ou
software interativo baseado no motor de jogos Weaver. São abordados
tanto os mecanismos de troca de mensagens quanto os componentes
criptográficos responsáveis por garantir confidencialidade,
integridade e autenticação mútua entre os programas participantes.}

\secao{1. Introdução}

\subsecao{1.1. Funções a Serem Exportadas}

O módulo de rede do motor de jogos Weaver atua definindo e exportando
uma série de funções que podem ser usadas externamente. Listaremos
aqui as funções e suas assinaturas.

Primeiro a função de inicialização e finalização. A inicialização deve
ser a primeira função a ser chamada, antes de qualquer outra função a
ser mostrada abaixo. Após invocar a finalização, não se deve chamar
novamente nenhuma outra função definida aqui (exceto a função de
inicialização caso queira-se voltar a inicializar o módulo). A função
de inicialização também deve receber pares de função que fazem
alocação e desalocação de memória. Um par para alocações temporárias e
outro para alocações permanentes. Adicionar este tipo de suporte a
gerenciadores de memória personalizados é algo que todo módulo Weaver
faz.

@<Declaração de Função (network.h)@>=
void _Winit_network(void *(*permanent_alloc)(size_t),
                    void (*permanent_free)(void *),
                    void *(*temporary_alloc)(size_t),
                    void (*temporary_free)(void *));
void _Wfinish_network(void);
@

Para gerar uma nova conexão (mas ainda não ativá-la), usamos:

@<Declaração de Função (network.h)@>+=
struct connection *_Wcreate_connection(void);
@

\subsecao{1.2. Programação Literária}

Nosso código será escrito usando técnica de programação literária
proposta por Knuth em [KNUTH, 1984]. Ela consiste em escrever um
programa de computador explicando didaticamente em texto o que se está
fazendo à medida que apresenta o código. Depois, o programa é
compilado através de programas que extraem o código diretamente do
texto didático. O código deve assim ser apresentado da forma que for
mais adequada para a explicação no texto, não como for mais adequado
para o computador.

Seguindo esta técnica, este documento não é uma simples documentação
do nosso código. Ele é por si só o código. A parte que será extraída e
compilada posteriormente pode ser identificada como sendo o código
presente em fundo cinza. Geralmente começamos cada trecho de código
com um título que a nomeia. Por exemplo, imediatamente antes desta
subseção nós apresentamos uma série de declarações. E como pode-se
deduzir pelo título delas, a maioria será posteriormente posicionada
dentro de um arquivo chamado \monoespaco{network.h}.

Podemos apresentar aqui a estrutura do arquivo \monoespaco{network.h}:

@(src/network.h@>=
#ifndef __WEAVER_NETWORK
#define __WEAVER_NETWORK
#ifdef __cplusplus
extern "C" {
#endif
#include <stdlib.h> // Biblioteca padrão
@<Inclui Cabeçalhos Gerais (network.h)@>
//@<Macros Gerais (network.h)@>
@<Estrutura de Dados (network.h)@>
@<Declaração de Função (network.h)@>
#ifdef __cplusplus
}
#endif
#endif
@

O código acima mostra a burocracia padrão para definir um cabeçalho
para nossa API em C. As duas primeiras linhas mais a última são macros
que garantem que esse cabeçalho não será inserido mais de uma vez em
uma mesma unidade de compilação. As linhas 3, 4, 5, assim como a
penúltima, antepenúltima e a antes da antepenúltima tornam o cabeçalho
adequado a ser inserido em código C++. Essas linhas apenas avisam que
o que definirmos ali deve ser encarado como código C. Por isso o
compilador está livre para fazer otimizações sabendo que não usaremos
recursos da linguagem C++, como sobrecarga de operadores. Logo em
seguida, inserimos um cabeçalho que nos permite declarar o tipo
booleano. E tem também uma parte em vermelha. Note que uma delas é
``Declaração de Função (network.h)'', o mesmo nome apresentado no trecho de
código mostrado quando descrevemos nossa API antes dessa
subseção. Isso significa que aquele código visto antes será depois
inserido ali. As outras partes em vermelho representam código que
ainda iremos definir nas seções seguintes.

Caso queira observar o que irá no arquivo \monoespaco{network.c}
associado a este cabeçaho, o código será este:

@(src/network.c@>=
#include "network.h"
#if defined(__EMSCRIPTEN__)
#include <emscripten.h>
#endif
@<Cabeçalhos Locais (network.c)@>
@<Macros Locais (network.c)@>
//@<Estrutura de Dados Locais (network.c)@>
@<Variáveis Locais (network.c)@>
@<Funções Auxiliares Locais (network.c)@>
@<Definição de Funções da API (network.c)@>
@


Todo o código que definiremos e explicaremos a seguir será posicionado
nestes dois arquivos. Além deles, nenhum outro arquivo será criado.

\secao{2. Inicialização do Módulo de Rede}

A primeira parte do código que vamos introduzir são os cabeçalhos de
uso da rede. No Windows, a biblioteca usada é o ``winsock2''. Essa
biblioteca também deve ser ligada externamente ao programa, mas isso
pode ser feito com uma diretiva ``pragma'' para o compilador:

@<Cabeçalhos Locais (network.c)@>=
#if defined(_WIN32)
#include <winsock2.h>
#pragma comment(lib,"wsock32.lib")
#endif
@

Em sistemas baseados em Unix, só precisamos incluir os cabeçalhos
adequados. A capacidade de se conectar já faz parte das bibliotecas
padrão e não requer a ligação com bibliotecas externas:

@<Cabeçalhos Locais (network.c)@>+=
#if defined(__unix__)
#include <sys/socket.h>
#include <netinet/in.h>
#include <fcntl.h>
#endif
@

Se estivermos executando WebAssembly em um navegador de Internet, a
conexão de rede deve sr feita usando recursos do próprio navegador, e
isso não requer cabeçalhos especiais.

Na maioria dos ambientes, não é necessário realizar nenhum tipo de
inicialização especial antes de usar as funções para estabelecer
conexões de rede. Mas há exceções (o Windows, por exemplo), e por
causa disso é importante existir uma função que cuida da inicialização
do módulo de rede. Tal função faz a inicialização nos sistemas em que
isso é necessário. Nos demais sistemas, a inicialização ainda é
importante, mas apenas para armazenarmos as nossas funções de alocação
e desalocação.

@<Cabeçalhos Locais (network.c)@>+=
#include <stdlib.h> // Requer: 'malloc', 'free'
@

@<Variáveis Locais (network.c)@>=
// Por padrão as funções de alocação serão as da biblioteca padrão.
// Mas a inicialização pode modificar o valor padrão delas:
static void *(*permanent_alloc)(size_t) = malloc;
static void *(*temporary_alloc)(size_t) = malloc;
static void (*permanent_free)(void *) = free;
static void (*temporary_free)(void *) = free;
@

@<Definição de Funções da API (network.c)@>=
// A função de inicialização:
void _Winit_network(void *(*p_alloc)(size_t), void (*p_free)(void *),
                    void *(*t_alloc)(size_t), void (*t_free)(void *)){
  permanent_alloc = p_alloc;
  permanent_free = p_free;
  temporary_alloc = t_alloc;
  temporary_free = t_free;  
#if defined(_WIN32) // Windows:
  WSADATA WsaData;
  WSAStartup(MAKEWORD(2,2), &WsaData);
#endif
  @<Weaver Network: Inicialização@>
  return;
}
@

Sistemas que requerem uma inicialização adicional para usar a rede
podem precisar também de uma finalização, que é invocada abaixo:

@<Definição de Funções da API (network.c)@>+=
void _Wfinish_network(void){
#if defined(_WIN32) // Windows:
  WSACleanup();
#endif
  return;
}
@

\secao{3. Conexões UDP}

A base da nossa comunicação será feita usando oprotocolo UDP, na
maioria dos ambientes de execução. O UDP, cujo nome significa ``User
Datagram Protocol'' (ou Protocolo de Datagrama de Usuário) estabelece
um formato sobre o qual duas máquians se comunicam diretamente sobre o
protocolo IP. É um protocolo bastante simples, mas justamente por isso
não oferece garantia alguma se cada um dos pacotes enviados por ele
chegará ao destino, ou se eles chegarão na ordem esperada.

O protocolo estabelece que toda mensagem trocada entre duas máquinas
com um dado IP possua um cabeçalho com 4 elementos, cada um deles com
2 bytes (ou 16 bits). Os elementos são: porta de origem, porta de
destino, tamanho do datagrama em octetos (contando o cabeçalho mais os
dados) e um ``checksum'' para testar a integridade. O restante do
pacote contém os dados transmitidos, que pode ser entre 0 bytes e
65.527 bytes (o tamanho máximo, que faz o tamanho do pacote ser
expresso em 16 bits). Na prática pacotes maiores que 1500 bytes não
são recomendados, pois tais pacotes provavelmente serão fragmentados,
gerando impacto de performance e diminuindo a chance de chegarem ao
destino. É preciso ter em mente que o protocolo IPv4 ou IPv6 que é
usado para transmitir a mensagem também irá gastar alguns bytes desse
limite (20--60 bytes no caso de IPv4 e exatamente 40 bytes no caso de
IPv6).

\alinhaverbatim
|_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|     |_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|
         Porta de Origem                           Porta de Destino

|_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|     |_|_|_|_|_|_|_|_|.|_|_|_|_|_|_|_|_|
         Tamanho do Datagrama                        Checksum
|_|_|_|_|_|_|_|_|.........................................|_|_|_|_|_|_|_|_|_|
                                 Dados
\alinhanormal

Comunicar-se entre dois participantes geralmente envolve criar uma
conexão entre eles: ambos os lados abrem um ``socket'' (abstração do
Sistema Operacional para a conexão) com o programa na origem indicando
o endereço e porta do progrma de destino. Isso ocorre quando tempos os
cenários abaixo:

1) Computadores se conectam usando uma rede local (LAN). Neste caso,
eles usam os seus endereços de IP na rede local, sem se preocupar com
IPs da Internet.

2) Os clientes se comunicam com um servidor sendo intermediário da
comunicação entre eles. Neste caso, cada cliente precisa apenas saber
do endereço IP de Internet do servidor, que se responsabiliza por
realizar troca de emnsagens entre eles.

Contudo, pode existir um cenário mais complicado:

3) Os clientes estão em redes locais diferentes e querem se conectar
diretamente entre si.

É importante notar que neste caso cada cliente precisa também
descobrir qual o seu próprio endereço de Internet, e como o roteador
local traduz combinações de IP e porta destinados ao cliente de modo
que não hajam conflitos com outros clientes da mesma rede que podem
estar usando a mesma porta para conexões externas. Para isso o
roteador usa uma tabela NAT para fazer traduções. Por exemplo, toda
conexão externa na porta 6282 pode ser traduzida usando tal tabela
como uma conexão na porta 3855 na máquina local A, enquanto uma
conexão vinda de fora na porta 6283 pode ser traduzaida como conexão
na porta 3855 na máquina local B. Descobrir como lidar com tais
traduções é algo que pode ser feito usando a ajuda de um servidor
externo, usando protocolos como o STUN.

Sendo assim, para tratar a conexão no caso 3, é preciso:

a) Endereço de um servidor STUN externo.

b) Cada par de máquinas que está se conectando precisa gerar dados com
informações sobre sua própria conexão e enviá-la para seu
parceiro. Como eles ainda não estão conectados, tais informações são
trocadas por meio de um canal externo.

Ao invés então de lidar com o conceito mais baixo-nível de
``sockets'', vamos criar uma abstração capaz de abarcar tanto eles
como conexões WebRTC feitas no caso 3 mais complicado. Uma conexão
precisará ser criada e ativada. Criar a conexão gera sua estrutura de
dados, e caso estejamos no caso 3, dentro desta estrutura há as
informações sobre a conexão que deve ser compartilhada com o par da
conexão por mecanismos externos. Ativar a conexão requer passar uma
string, que no caso 1 e 2 se resume à um IP e porta, mas no caso 3
significa colocar uma string com informações da conexão gerada pelo
parceiro e recebida por canal externo.

Isso requer então possuir na estrutura as seguintes variáveis:

@<Inclui Cabeçalhos Gerais (network.h)@>=
#include <stdbool.h> // Requer 'bool'
@

@<Estrutura de Dados (network.h)@>=
struct connection{
  bool active; // A conexão foi ativada?
  char *local_data, *peer_data; // Dados de conexão locais e do parceiro
  @<struct connection: Atributos@>
};
@

\subsecao{3.1. Criando a Conexão}

No caso mais simples de criação de conexão, estamos rodando
nativamente, não em um navegador Web, e queremos usar então
``sockets''. Em nossa estrutura de conexão precisamos então armazenar
um número de identificação para o socket que iremos criar:

@<struct connection: Atributos@>=
int _conn_handle;
@

A função que cria nova conexão deve então criar um socket UDP. Nos
casos mais simples, esta função se limita a:

@<Definição de Funções da API (network.c)@>+=
#if !defined(__EMSCRIPTEN__)
struct connection *_Wcreate_connection(void){
  struct connection *cnt;
  cnt = permanent_alloc(sizeof(struct connection));
  if(cnt != NULL){
    cnt -> local_data = cnt -> peer_data = NULL;
    cnt -> _conn_handle = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    cnt -> active = false;
    if(cnt -> _conn_handle == 0){
      if(permanent_free != NULL)
        permanent_free(cnt);
      return NULL;
    }
  }
  return cnt;
}
#endif
@

Caso estejamos usando WebAssembly, nosso objetivo é criar usando
Javascript um objeto ``RTCPeerConnection''. Além disso, devemos ser
capazes de referenciar tais objetos à partir do código C, e de
associá-los a uma conexão. Para isso, vamos criar uma lista vazia de
tais objetos durante a inicialização e vamos populá-la toda vez que
uma nova conexão for criada em WebAssembly:

@<Weaver Network: Inicialização@>=
#if defined(__EMSCRIPTEN__)
emscripten_run_script("_Wlist_of_connections = [];");
#endif
@

Para criar uma conexão RTCPeerConnection, precisamos também indicar
uma lista de servidores ICE. São servidores que auxiliam as máquinas a
descobrir informações sobre seu próprio endereço na Internet por meio
de protocolos como o STUN, ou que opcionalmente podem também
intermediar a comunicação entre máquinas quando elas não puderem se
conectar diretamente (usando protocolos como TURN). Queremos que um
programa seja capaz de fornecer uma lista oficial, mas que tais
valores possam ser facilmente modificados, até mesmo pelos usuários,
se for necessário. Para isso, vamos garantir a existência de uma
variável global Javascript que irá conter tal lista. Ela começa
vazia. E esperamos que programas ou usuários a preencham colocando
servidores de sua confiança:

@<Weaver Network: Inicialização@>=
#if defined(__EMSCRIPTEN__)
emscripten_run_script(
  "var iceServers;"
  "iceServers = ((iceServers===undefined)?([]):(iceServers));");
#endif
@

E definimos agora um código Javascript que cria uma nova
RTCPeerConnection, inicializando com servidores ICE, obtém informações
sobre a própria conexão (usando servidores indicados), adiciona a
conexão na lista e retorna o seu índice dentro da lista de conexões:

@<Funções Auxiliares Locais (network.c)@>=
#if defined(__EMSCRIPTEN__)
EM_ASYNC_JS(int, new_rtc_connection, (), {
  const peerConnection = new RTCPeerConnection({'iceServers': iceServers});
  const offer = await peerConnection.createOffer();
  await peerConnection.setLocalDescription(offer);
  const index = _Wlist_of_connections.push(peerConnection);
  return index-1;
});
#endif
@

Podemos precisar extrair algumas informações sobre esta conexão RTC
que está armazenada em Javascript. A primeira delas é o tamanho do
dado local que descreve a conexão do usuário, dado o índice da conexão:

@<Funções Auxiliares Locais (network.c)@>+=
#if defined(__EMSCRIPTEN__)
EM_JS(int, rtc_connection_data_size, (int index), {
  return JSON.stringify(_Wlist_of_connections[index].localDescription).length;
});
#endif
@

Podemos extrair também a string com a descrição dos dados
locais. Entretanto, tal string é alocada pela biblioteca padrão, e
devemos desalocá-la imediatamente após copiá-la. Isso porque este
módulo deve respeitar o uso de gerenciadores de memória customizados,
evitando usar o alocador da biblioteca padrão:

@<Funções Auxiliares Locais (network.c)@>+=
#if defined(__EMSCRIPTEN__)
EM_JS(char *, get_rtc_connection_data, (int index), {
  return stringToNewUTF8(JSON.stringify(_Wlist_of_connections[index].localDescription));
});
#endif
@

Com ajuda destas funções auxiliares que executam Javascript, podemos
criar uma conexão também no caso em que queremos estabelecer conexão
usando WebRTC:

@<Cabeçalhos Locais (network.c)@>+=
#include <string.h> // Requer 'memcpy'
@

@<Definição de Funções da API (network.c)@>+=
#if defined(__EMSCRIPTEN__)
struct connection *_Wcreate_connection(void){
  struct connection *cnt;
  cnt = permanent_alloc(sizeof(struct connection));
  if(cnt != NULL){
    char *temporary_buffer;
    int size;
    cnt -> local_data = cnt -> peer_data = NULL;
    cnt -> active = false;
    cnt -> _conn_handle = new_rtc_connection();
    size = rtc_connection_data_size(cnt -> _conn_handle);
    cnt -> local_data = (char *) permanent_alloc(size + 1);
    if(cnt -> local_data == NULL){
      if(permanent_free != NULL)
        permanent_free(cnt);
      return NULL;
    }
    temporary_buffer = get_rtc_connection_data(cnt -> _conn_handle);
    memcpy(cnt -> local_data, temporary_buffer, size + 1);
    free(temporary_buffer);
  }
  return cnt;
}
#endif
@

O número da porta deve ser preferencialmente
maior que 1024 para evitar portas reservadas pelo sistema e menores
que 50000, para evitar espaços reservados para atribuição dinâ,ica de
portas. A porta que iremos usar será aquela especificada pela macro
\monoespaco{W\_PORT}. Caso esta macro não exista, vamos usar um valor
padrão:

@<Macros Locais (network.c)@>=
#if !defined(W_PORT)
#define W_PORT 29827 // Valor padrão escolhido aleatoriamente
#endif
@

\fim